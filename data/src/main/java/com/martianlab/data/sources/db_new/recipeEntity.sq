CREATE TABLE IF NOT EXISTS `recipe` (
    `id` INTEGER UNIQUE PRIMARY KEY AUTOINCREMENT NOT NULL,
    `title` TEXT NOT NULL,
    `text` TEXT NOT NULL,
    `complexity` INTEGER as Int NOT NULL,
    `person_count` INTEGER as Int NOT NULL,
    `image_url` TEXT NOT NULL,
    `rating` REAL,
    `votes` INTEGER as Int
);

CREATE TABLE IF NOT EXISTS `User` (
    `id` INTEGER as Int PRIMARY KEY AUTOINCREMENT NOT NULL,
    `name` TEXT NOT NULL,
    `pin` INTEGER as Int NOT NULL
);

CREATE UNIQUE INDEX IF NOT EXISTS `index_User_pin` ON `User` (`pin`);


CREATE TABLE IF NOT EXISTS `recipe_tag` (
    `id` INTEGER NOT NULL,
    `title` TEXT NOT NULL,
    `recipe_id` INTEGER NOT NULL,
PRIMARY KEY(`id`,`recipe_id`),
FOREIGN KEY(`recipe_id`) REFERENCES `recipe`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE INDEX IF NOT EXISTS `index_recipe_tag_recipe_id` ON `recipe_tag` (`recipe_id`);

CREATE INDEX IF NOT EXISTS `index_recipe_tag_title` ON `recipe_tag` (`title`);

CREATE TABLE IF NOT EXISTS `recipe_comment` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    `recipe_id` INTEGER NOT NULL,
    `authorId` INTEGER NOT NULL,
    `authorName` TEXT NOT NULL,
    `date` INTEGER NOT NULL,
    `text` TEXT NOT NULL,
    `parentCommentId` INTEGER,
    `photoURLs` TEXT,
FOREIGN KEY(`recipe_id`) REFERENCES `recipe`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE INDEX IF NOT EXISTS `index_recipe_comment_recipe_id` ON `recipe_comment` (`recipe_id`);

CREATE TABLE IF NOT EXISTS `recipe_ingredient` (
    `id` INTEGER NOT NULL,
    `recipe_id` INTEGER NOT NULL,
    `title` TEXT NOT NULL,
    `quantity` TEXT NOT NULL,
    `measureUnit` TEXT NOT NULL,
    `position` INTEGER as Int NOT NULL,
PRIMARY KEY(`id`,`recipe_id`),
FOREIGN KEY(`recipe_id`) REFERENCES `recipe`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE INDEX IF NOT EXISTS `index_recipe_ingredient_recipe_id` ON `recipe_ingredient` (`recipe_id`);

CREATE INDEX IF NOT EXISTS `index_recipe_ingredient_title` ON `recipe_ingredient` (`title`);

CREATE TABLE IF NOT EXISTS `recipe_entity` (
    `id` INTEGER NOT NULL,
    `recipe_id` INTEGER NOT NULL,
    `imageURL` TEXT NOT NULL,
    `text` TEXT NOT NULL,
    `step` INTEGER as Int NOT NULL,
PRIMARY KEY(`id`),
FOREIGN KEY(`recipe_id`) REFERENCES `recipe`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE );

CREATE INDEX IF NOT EXISTS `index_recipe_entity_recipe_id` ON `recipe_entity` (`recipe_id`);

getRecipesByTagTitle:
SELECT recipe.* FROM recipe JOIN recipe_tag ON recipe.id = recipe_id WHERE recipe_tag.title = ? ORDER BY recipe.rating DESC, recipe.id DESC;

getRecipes:
SELECT * FROM recipe JOIN recipe_tag ON recipe.id = recipe_id;

getById:
SELECT * FROM recipe WHERE id = ?;

insert:
INSERT OR REPLACE INTO `recipe` (`id`,`title`,`text`,`complexity`,`person_count`,`image_url`,`rating`,`votes`) VALUES (nullif(?, 0),?,?,?,?,?,?,?);

insertComments:
INSERT OR REPLACE INTO `recipe_comment` (`id`,`recipe_id`,`authorId`,`authorName`,`date`,`text`,`parentCommentId`,`photoURLs`) VALUES (nullif(?, 0),?,?,?,?,?,?,?);

insertIngredients:
INSERT OR REPLACE INTO `recipe_ingredient` (`id`,`recipe_id`,`title`,`quantity`,`measureUnit`,`position`) VALUES (?,?,?,?,?,?);

insertStages:
INSERT OR REPLACE INTO `recipe_entity` (`id`,`recipe_id`,`imageURL`,`text`,`step`) VALUES (?,?,?,?,?);

insertTags:
INSERT OR REPLACE INTO `recipe_tag` (`id`,`title`,`recipe_id`) VALUES (?,?,?);

removeTag:
DELETE FROM recipe_tag WHERE recipe_id = ? AND title  = ?;

searchRecipes:
SELECT * FROM recipe WHERE recipe.title LIKE ?;

searchIngredients:
SELECT * FROM recipe_ingredient WHERE recipe_ingredient.title LIKE ?;

getByIngredient:
SELECT * FROM recipe JOIN recipe_ingredient ON recipe.id = recipe_id WHERE recipe_ingredient.title = ?;